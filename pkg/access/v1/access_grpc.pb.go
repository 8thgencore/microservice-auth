// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: access.proto

package access_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AccessV1_Check_FullMethodName              = "/access_v1.AccessV1/Check"
	AccessV1_AddRoleEndpoint_FullMethodName    = "/access_v1.AccessV1/AddRoleEndpoint"
	AccessV1_UpdateRoleEndpoint_FullMethodName = "/access_v1.AccessV1/UpdateRoleEndpoint"
	AccessV1_DeleteRoleEndpoint_FullMethodName = "/access_v1.AccessV1/DeleteRoleEndpoint"
	AccessV1_GetRoleEndpoints_FullMethodName   = "/access_v1.AccessV1/GetRoleEndpoints"
)

// AccessV1Client is the client API for AccessV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccessV1Client interface {
	// Check executes user authorization for endpoint.
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Add a new endpoint permission.
	AddRoleEndpoint(ctx context.Context, in *AddRoleEndpointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Update an existing endpoint permission.
	UpdateRoleEndpoint(ctx context.Context, in *UpdateRoleEndpointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete an existing endpoint permission.
	DeleteRoleEndpoint(ctx context.Context, in *DeleteRoleEndpointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List all endpoints and their allowed roles.
	GetRoleEndpoints(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRoleEndpointsResponse, error)
}

type accessV1Client struct {
	cc grpc.ClientConnInterface
}

func NewAccessV1Client(cc grpc.ClientConnInterface) AccessV1Client {
	return &accessV1Client{cc}
}

func (c *accessV1Client) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccessV1_Check_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessV1Client) AddRoleEndpoint(ctx context.Context, in *AddRoleEndpointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccessV1_AddRoleEndpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessV1Client) UpdateRoleEndpoint(ctx context.Context, in *UpdateRoleEndpointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccessV1_UpdateRoleEndpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessV1Client) DeleteRoleEndpoint(ctx context.Context, in *DeleteRoleEndpointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AccessV1_DeleteRoleEndpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessV1Client) GetRoleEndpoints(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRoleEndpointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoleEndpointsResponse)
	err := c.cc.Invoke(ctx, AccessV1_GetRoleEndpoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessV1Server is the server API for AccessV1 service.
// All implementations must embed UnimplementedAccessV1Server
// for forward compatibility.
type AccessV1Server interface {
	// Check executes user authorization for endpoint.
	Check(context.Context, *CheckRequest) (*emptypb.Empty, error)
	// Add a new endpoint permission.
	AddRoleEndpoint(context.Context, *AddRoleEndpointRequest) (*emptypb.Empty, error)
	// Update an existing endpoint permission.
	UpdateRoleEndpoint(context.Context, *UpdateRoleEndpointRequest) (*emptypb.Empty, error)
	// Delete an existing endpoint permission.
	DeleteRoleEndpoint(context.Context, *DeleteRoleEndpointRequest) (*emptypb.Empty, error)
	// List all endpoints and their allowed roles.
	GetRoleEndpoints(context.Context, *emptypb.Empty) (*GetRoleEndpointsResponse, error)
	mustEmbedUnimplementedAccessV1Server()
}

// UnimplementedAccessV1Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccessV1Server struct{}

func (UnimplementedAccessV1Server) Check(context.Context, *CheckRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedAccessV1Server) AddRoleEndpoint(context.Context, *AddRoleEndpointRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoleEndpoint not implemented")
}
func (UnimplementedAccessV1Server) UpdateRoleEndpoint(context.Context, *UpdateRoleEndpointRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoleEndpoint not implemented")
}
func (UnimplementedAccessV1Server) DeleteRoleEndpoint(context.Context, *DeleteRoleEndpointRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleEndpoint not implemented")
}
func (UnimplementedAccessV1Server) GetRoleEndpoints(context.Context, *emptypb.Empty) (*GetRoleEndpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleEndpoints not implemented")
}
func (UnimplementedAccessV1Server) mustEmbedUnimplementedAccessV1Server() {}
func (UnimplementedAccessV1Server) testEmbeddedByValue()                  {}

// UnsafeAccessV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccessV1Server will
// result in compilation errors.
type UnsafeAccessV1Server interface {
	mustEmbedUnimplementedAccessV1Server()
}

func RegisterAccessV1Server(s grpc.ServiceRegistrar, srv AccessV1Server) {
	// If the following call pancis, it indicates UnimplementedAccessV1Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AccessV1_ServiceDesc, srv)
}

func _AccessV1_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessV1Server).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessV1_Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessV1Server).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessV1_AddRoleEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessV1Server).AddRoleEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessV1_AddRoleEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessV1Server).AddRoleEndpoint(ctx, req.(*AddRoleEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessV1_UpdateRoleEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessV1Server).UpdateRoleEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessV1_UpdateRoleEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessV1Server).UpdateRoleEndpoint(ctx, req.(*UpdateRoleEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessV1_DeleteRoleEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessV1Server).DeleteRoleEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessV1_DeleteRoleEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessV1Server).DeleteRoleEndpoint(ctx, req.(*DeleteRoleEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessV1_GetRoleEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessV1Server).GetRoleEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessV1_GetRoleEndpoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessV1Server).GetRoleEndpoints(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AccessV1_ServiceDesc is the grpc.ServiceDesc for AccessV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccessV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "access_v1.AccessV1",
	HandlerType: (*AccessV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _AccessV1_Check_Handler,
		},
		{
			MethodName: "AddRoleEndpoint",
			Handler:    _AccessV1_AddRoleEndpoint_Handler,
		},
		{
			MethodName: "UpdateRoleEndpoint",
			Handler:    _AccessV1_UpdateRoleEndpoint_Handler,
		},
		{
			MethodName: "DeleteRoleEndpoint",
			Handler:    _AccessV1_DeleteRoleEndpoint_Handler,
		},
		{
			MethodName: "GetRoleEndpoints",
			Handler:    _AccessV1_GetRoleEndpoints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "access.proto",
}
