services:
  auth:
    image: auth:${APP_IMAGE_TAG}
    container_name: auth
    restart: unless-stopped
    env_file:
      - .env.${ENV}
    ports:
      - "${GRPC_PORT}:${GRPC_PORT}"
      - "${HTTP_PORT}:${HTTP_PORT}"
      - "${SWAGGER_PORT}:${SWAGGER_PORT}"
      - "${PROMETHEUS_HTTP_PORT}:${PROMETHEUS_HTTP_PORT}"
    networks:
      - service-network
    depends_on:
      db-auth:
        condition: service_healthy
      migrator-auth:
        condition: service_completed_successfully

  db-auth:
    image: postgres:${POSTGRES_IMAGE_TAG}
    container_name: db-auth
    restart: unless-stopped
    env_file:
      - .env.${ENV}
    expose:
      - 5432
    # ports:
      # - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - service-network
    volumes:
      - postgres_volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 1s
      timeout: 5s
      retries: 5

  redis-auth:
    image: redis:${REDIS_IMAGE_TAG}
    container_name: redis-auth
    command:
      - /bin/sh
      - -c
      # - Double dollars, so that the variable is not expanded by Docker Compose
      # - Surround by quotes, so that the shell does not split the password
      # - The ${variable:?message} syntax causes shell to exit with a non-zero
      #   code and print a message, when the variable is not set or empty
      - redis-server --requirepass "$${REDIS_PASSWORD:?REDIS_PASSWORD variable is not set}"
    restart: unless-stopped
    environment:
      ALLOW_EMPTY_PASSWORD: no
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
    expose:
      - 6379
    # ports:
      # - "${REDIS_PORT:-6379}:6379"
    networks:
      - service-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30

  migrator-auth:
    image: migrator-auth:${MIGRATOR_IMAGE_TAG}
    container_name: migrator-auth
    restart: on-failure
    env_file:
      - .env.${ENV}
    networks:
      - service-network
    depends_on:
      db-auth:
        condition: service_healthy

  prometheus:
    image: prom/prometheus:${PROMETHEUS_IMAGE_TAG}
    container_name: prometheus
    ports:
      - "9090:9090"
    networks:
      - service-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./metrics/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./metrics/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus_volume:/prometheus

  grafana:
    image: grafana/grafana-oss:${GRAFANA_IMAGE_TAG}
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - service-network
    volumes:
      - grafana_volume:/var/lib/grafana

  jaeger:
    image: jaegertracing/all-in-one:${JAEGER_IMAGE_TAG}
    container_name: jaeger
    ports:
      - "16686:16686" # web
      - "4317:4317" # OTLP over gRPC
    networks:
      - service-network

volumes:
  postgres_volume:
  prometheus_volume:
  grafana_volume:

networks:
  service-network:
    name: service-net
    external: true
