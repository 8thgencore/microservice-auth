// user.proto
// This file defines the User API v1 for managing user operations
// such as create, get, update, and delete.

syntax = "proto3";

package user_v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

option go_package =  "github.com/8thgencore/microservice-auth/pkg/pb/user/v1;user_v1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "User API"
		version: "1.0.0"
		contact: {
			name: "Walter White"
		};
	};

	host: "{HTTP_HOST}:{HTTP_PORT}"
	schemes: HTTP, 
	schemes: HTTPS,
	consumes: "application/json",
	produces: "application/json",
};

// UserV1 defines the User service 
// which provides methods to create, get, update, and delete users.
service UserV1 {
  // Create is used for creating a new user.
  rpc Create(CreateRequest) returns (CreateResponse) {
    option (google.api.http) = {
			post: "/v1/user"
			body: "*"
		};
  }

  // Get is used to obtain user info by ID.
  rpc Get(GetRequest) returns (GetResponse) {
    option (google.api.http) = {
			get: "/v1/user"
		};
  }

  // Update is used for updating existing user info.
  rpc Update(UpdateRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
			patch: "/v1/user"
			body: "*"
		};
  }

  // Delete is used for deleting a user by ID.
  rpc Delete(DeleteRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
			delete: "/v1/user"
		};
  }

  // GetMe returns information about the currently authenticated user
  rpc GetMe(google.protobuf.Empty) returns (GetMeResponse) {
    option (google.api.http) = {
      get: "/v1/user/me"
    };
  }

  // ChangePassword allows users to change their password securely
  rpc ChangePassword(ChangePasswordRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/user/change-password"
      body: "*"
    };
  }
}

// Role defines the various roles a user can have in the system.
enum Role {
  // Unknown or unspecified role.
  UNKNOWN_UNSPECIFIED = 0;
  // Regular user role.
  USER = 1;
  // Admin user role.
  ADMIN = 2;
}

// User represents a user in the system.
message User {
  // ID of the user.
  string id = 1 [(validate.rules).string = {uuid: true}];
  // Name of the user.
  string name = 2;
  // Email of the user.
  string email = 3;
  // Role of the user.
  Role role = 4;
  // Timestamp when the user was created.
  google.protobuf.Timestamp created = 5;
  // Timestamp when the user info was last updated.
  google.protobuf.Timestamp updated = 6;
}

// UserCreate represents the data required to create a new user.
message UserCreate {
  // Name of the user to create.
  string name = 1 [(validate.rules).string = {min_len: 1, max_len: 50}];
  // Email of the user to create.
  string email = 2 [(validate.rules).string.email = true];
  // Password of the user to create.
  string password = 3 [(validate.rules).string = {min_len: 8, max_len: 256}];
  // Password confirmation of the user to create.
  string password_confirm = 4 [(validate.rules).string = {min_len: 8, max_len: 256}];
  // Role of the user to create.
  Role role = 5 [(validate.rules).enum.defined_only = true];
}

// UserUpdate represents the data required to update an existing user.
message UserUpdate {
  // ID of the user to update.
  string id = 1 [(validate.rules).string = {uuid: true}];
  // [optional] Name of the user to update.
  google.protobuf.StringValue name = 2 [
	(validate.rules).string = {ignore_empty: true, min_len: 1, max_len: 50}
	];
  // [optional] Email of the user to update.
  google.protobuf.StringValue email = 3 [
	(validate.rules).string = {email: true, ignore_empty: true}
	];
  // Role of the user to update.
  Role role = 4 [(validate.rules).enum.defined_only = true];
}

// CreateRequest represents the request to create a user.
message CreateRequest {
  UserCreate user = 1;
}

// CreateResponse represents the response after a user is created.
message CreateResponse {
  // ID of the created user.
  string id = 1;
}

// GetRequest represents the request to get a user by ID.
message GetRequest {
  // ID of the user to retrieve.
  string id = 1 [(validate.rules).string = {uuid: true}];
}

// GetResponse represents the response containing the user info.
message GetResponse {
  User user = 1;
}

// UpdateRequest represents the request to update a user.
message UpdateRequest {
  UserUpdate user = 1;
}

// DeleteRequest represents the request to delete a user by ID.
message DeleteRequest {
  // ID of the user to delete.
  string id = 1 [(validate.rules).string = {uuid: true}];
}

// GetMeResponse represents the response containing the current user's information
message GetMeResponse {
  // Full user information
  User user = 1;
}


// ChangePasswordRequest represents the request to change a user's password
message ChangePasswordRequest {
  // Current password for verification
  string current_password = 1 [(validate.rules).string = {min_len: 8, max_len: 256}];
  // New password to set
  string new_password = 2 [(validate.rules).string = {min_len: 8, max_len: 256}];
}
